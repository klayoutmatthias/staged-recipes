# Note: there are many handy hints in comments in this example -- remove them when you've finalized your recipe
# If your package is python based, we recommend using Grayskull to generate it instead:
# https://github.com/conda-incubator/grayskull

# Jinja variables help maintain the recipe as you'll update the version only here.
# Using the name variable with the URL in line 14 is convenient
# when copying and pasting from another recipe, but not really needed.
{% set name = "klayout" %}
{% set version = "0.27.12" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  patches:
    build.patch
  #url: https://github.com/KLayout/klayout/releases/download/{{ version }}/klayout-{{ version }}.tar.gz
  url: https://github.com/KLayout/klayout/archive/refs/tags/v{{ version }}.tar.gz
  sha256: 6ef5e6ae5ea387618663949a1efa105406aeb36db2d18d89eff0345955aae979
  # sha256 is the preferred checksum -- you can get it for a file with:
  #  `openssl sha256 <file name>`.
  # You may need the openssl package, available on conda-forge:
  #  `conda install openssl -c conda-forge``

build:
  # Uncomment the following line if the package is pure Python and the recipe is exactly the same for all platforms.
  # It is okay if the dependencies are not built for all platforms/versions, although selectors are still not allowed.
  # See https://conda-forge.org/docs/maintainer/knowledge_base.html#noarch-python for more details.
  # noarch: python
  # If the installation is complex, or different between Unix and Windows, use separate bld.bat and build.sh files instead of this key.
  # By default, the package will be built for the Python versions supported by conda-forge and for all major OSs.
  # Add the line "skip: True  # [py<35]" (for example) to limit to Python 3.5 and newer, or "skip: True  # [not win]" to limit to Windows.
  # More info about selectors can be found in the conda-build docs: 
  # https://docs.conda.io/projects/conda-build/en/latest/resources/define-metadata.html#preprocessing-selectors
  number: 0

requirements:
  build:
    # If your project compiles code (such as a C extension) then add the required compilers as separate entries here.
    # Compilers are named 'c', 'cxx' and 'fortran'.
    - {{ compiler('cxx') }}
    - make
    # Linux
    - {{ cdt('mesa-libgl-devel') }}  # [linux]
    - {{ cdt('mesa-dri-drivers') }}  # [linux]
    - {{ cdt('libselinux') }}  # [linux]
    - {{ cdt('libxdamage') }}  # [linux]
    - {{ cdt('libxxf86vm') }}  # [linux]
    - {{ cdt('libxext') }}     # [linux]
    - {{ cdt('libxfixes') }}  # [linux]
    - {{ cdt('libxau') }}  # [linux]

  host:
    # All Platforms
    - python>3.6
    - pip
    - ruby>2
    - Qt>=5
    - make
    - zlib
    - libpython-static
    # Windows
    - expat # [win]
    - curl # [win]
    - pthreads-win32 # [win]

test:
  # For python packages, it is useful to run pip check. However, sometimes the
  # metadata used by pip is out of date. Thus this section is optional if it is
  # failing.
  commands:
    - klayout -v

about:
  home: https://www.klayout.de/
  summary: 'Your Mask Layout Friend'
  description: |
    - View: Fast and accurate viewing of huge layout files
    - Edit: Draw, modify and transform hierarchical layout
    - Generate: Script layout generators, PCells and layout transformation tools
    - Analyze: Search, verify, and measure layout and code analysis scripts
  license: GPL-2.0-or-later	
  license_family: GPL
  license_file: LICENSE
  doc_url: https://www.klayout.de/doc.html
  dev_url: https://github.com/KLayout/klayout

extra:
  recipe-maintainers:
    # GitHub IDs for maintainers of the recipe.
    # Always check with the people listed below if they are OK becoming maintainers of the recipe. (There will be spam!)
    - curtisma
    - klayoutmatthias
    - proppy
    - flaport
    - joamatab
